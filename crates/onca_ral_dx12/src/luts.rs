use onca_core::utils::EnumCount;
use onca_ral::{QueueType, QueuePriority, Format, VertexFormat, VideoQueueType};
use windows::Win32::Graphics::{
    Direct3D12::*,
    Dxgi::Common::*
};

pub(crate) const DX12_QUEUE_TYPES : [D3D12_COMMAND_LIST_TYPE; QueueType::COUNT] = [
    D3D12_COMMAND_LIST_TYPE_DIRECT,
    D3D12_COMMAND_LIST_TYPE_COMPUTE,
    D3D12_COMMAND_LIST_TYPE_COPY,
];

pub(crate) const _DX12_VIDEO_QUEUE_TYPES : [D3D12_COMMAND_LIST_TYPE; VideoQueueType::COUNT] = [
    D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE,
    D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS,
    D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE,
];

pub(crate) const DX12_QUEUE_PRIORITIES : [D3D12_COMMAND_QUEUE_PRIORITY; QueuePriority::COUNT] = [
    D3D12_COMMAND_QUEUE_PRIORITY_NORMAL,
    D3D12_COMMAND_QUEUE_PRIORITY_HIGH,
];

pub(crate) const DX12_FORMATS : [DXGI_FORMAT; Format::COUNT] = [
    /* R64G64B64A64Typeless           */ DXGI_FORMAT_UNKNOWN,
    /* R64G64B64A64SFloat             */ DXGI_FORMAT_UNKNOWN,
    /* R64G64B64A64Uint               */ DXGI_FORMAT_UNKNOWN,
    /* R64G64B64A64SInt               */ DXGI_FORMAT_UNKNOWN,
    /* R64G64B64Typeless              */ DXGI_FORMAT_UNKNOWN,
    /* R64G64B64SFloat                */ DXGI_FORMAT_UNKNOWN,
    /* R64G64B64Uint                  */ DXGI_FORMAT_UNKNOWN,
    /* R64G64B64SInt                  */ DXGI_FORMAT_UNKNOWN,
    /* R64G64Typeless                 */ DXGI_FORMAT_UNKNOWN,
    /* R64G64SFloat                   */ DXGI_FORMAT_UNKNOWN,
    /* R64G64Uint                     */ DXGI_FORMAT_UNKNOWN,
    /* R64G64B64SInt                  */ DXGI_FORMAT_UNKNOWN,
    /* R64Typeless                    */ DXGI_FORMAT_UNKNOWN,
    /* R64SFloat                      */ DXGI_FORMAT_UNKNOWN,
    /* R64Uint                        */ DXGI_FORMAT_UNKNOWN,
    /* R64SInt                        */ DXGI_FORMAT_UNKNOWN,
    /* R32G32B32A32Typeless           */ DXGI_FORMAT_R32G32B32A32_TYPELESS,
    /* R32G32B32A32SFloat             */ DXGI_FORMAT_R32G32B32A32_FLOAT,
    /* R32G32B32A32Uint               */ DXGI_FORMAT_R32G32B32A32_UINT,
    /* R32G32B32A32SInt               */ DXGI_FORMAT_R32G32B32A32_SINT,
    /* R32G32B32Typeless              */ DXGI_FORMAT_R32G32B32_TYPELESS,
    /* R32G32B32SFloat                */ DXGI_FORMAT_R32G32B32_FLOAT,
    /* R32G32B32Uint                  */ DXGI_FORMAT_R32G32B32_UINT,
    /* R32G32B32SInt                  */ DXGI_FORMAT_R32G32B32_SINT,
    /* R32G32Typeless                 */ DXGI_FORMAT_R32G32_TYPELESS,
    /* R32G32SFloat                   */ DXGI_FORMAT_R32G32_FLOAT,
    /* R32G32Uint                     */ DXGI_FORMAT_R32G32_UINT,
    /* R32G32SInt                     */ DXGI_FORMAT_R32G32_SINT,
    /* R32Typeless                    */ DXGI_FORMAT_R32_TYPELESS,
    /* R32SFloat                      */ DXGI_FORMAT_R32_FLOAT,
    /* R32Uint                        */ DXGI_FORMAT_R32_UINT,
    /* R32SInt                        */ DXGI_FORMAT_R32_SINT,
    /* R16G16B16A16Typeless           */ DXGI_FORMAT_R16G16B16A16_TYPELESS,
    /* R16G16B16A16SFloat             */ DXGI_FORMAT_R16G16B16A16_FLOAT,
    /* R16G16B16A16Uint               */ DXGI_FORMAT_R16G16B16A16_UINT,
    /* R16G16B16A16SInt               */ DXGI_FORMAT_R16G16B16A16_SINT,
    /* R16G16B16A16UNorm              */ DXGI_FORMAT_R16G16B16A16_UNORM,
    /* R16G16B16A16SNorm              */ DXGI_FORMAT_R16G16B16A16_SNORM,
    /* R16G16B16A16UScaled            */ DXGI_FORMAT_R16G16B16A16_UINT, //< UScaled is an integer casted to a float, so use the int version
    /* R16G16B16A16SScaled            */ DXGI_FORMAT_R16G16B16A16_SINT, //< SScaled is an integer casted to a float, so use the int version
    // R16G16B16 formats are stored as RGBA
    /* R16G16B16Typeless              */ DXGI_FORMAT_R16G16B16A16_TYPELESS,
    /* R16G16B16SFloat                */ DXGI_FORMAT_R16G16B16A16_FLOAT,
    /* R16G16B16Uint                  */ DXGI_FORMAT_R16G16B16A16_UINT,
    /* R16G16B16SInt                  */ DXGI_FORMAT_R16G16B16A16_SINT,
    /* R16G16B16UNorm                 */ DXGI_FORMAT_R16G16B16A16_UNORM,
    /* R16G16B16SNorm                 */ DXGI_FORMAT_R16G16B16A16_SNORM,
    /* R16G16B16UScaled               */ DXGI_FORMAT_R16G16B16A16_UINT, //< UScaled is an integer casted to a float, so use the int version
    /* R16G16B16SScaled               */ DXGI_FORMAT_R16G16B16A16_SINT, //< SScaled is an integer casted to a float, so use the int version
    /* R16G16Typeless                 */ DXGI_FORMAT_R16G16_TYPELESS,
    /* R16G16SFloat                   */ DXGI_FORMAT_R16G16_FLOAT,
    /* R16G16Uint                     */ DXGI_FORMAT_R16G16_UINT,
    /* R16G16SInt                     */ DXGI_FORMAT_R16G16_SINT,
    /* R16G16UNorm                    */ DXGI_FORMAT_R16G16_UNORM,
    /* R16G16SNorm                    */ DXGI_FORMAT_R16G16_SNORM,
    /* R16G16UScaled                  */ DXGI_FORMAT_R16G16_UINT, //< UScaled is an integer casted to a float, so use the int version
    /* R16G16SScaled                  */ DXGI_FORMAT_R16G16_SINT, //< SScaled is an integer casted to a float, so use the int version
    /* R16Typeless                    */ DXGI_FORMAT_R16_TYPELESS,
    /* R16SFloat                      */ DXGI_FORMAT_R16_FLOAT,
    /* R16Uint                        */ DXGI_FORMAT_R16_UINT,
    /* R16SInt                        */ DXGI_FORMAT_R16_SINT,
    /* R16UNorm                       */ DXGI_FORMAT_R16_UNORM,
    /* R16SNorm                       */ DXGI_FORMAT_R16_SNORM,
    /* R16UScaled                     */ DXGI_FORMAT_R16_UINT, //< UScaled is an integer casted to a float, so use the int version
    /* R16SScaled                     */ DXGI_FORMAT_R16_SINT, //< SScaled is an integer casted to a float, so use the int version
    /* R8G8B8A8Typeless               */ DXGI_FORMAT_R8G8B8A8_TYPELESS,
    /* R8G8B8A8Uint                   */ DXGI_FORMAT_R8G8B8A8_UINT,
    /* R8G8B8A8SInt                   */ DXGI_FORMAT_R8G8B8A8_SINT,
    /* R8G8B8A8UNorm                  */ DXGI_FORMAT_R8G8B8A8_UNORM,
    /* R8G8B8A8SNorm                  */ DXGI_FORMAT_R8G8B8A8_SNORM,
    /* R8G8B8A8UScaled                */ DXGI_FORMAT_R8G8B8A8_UINT, //< UScaled is an integer casted to a float, so use the int version
    /* R8G8B8A8SScaled                */ DXGI_FORMAT_R8G8B8A8_SINT, //< SScaled is an integer casted to a float, so use the int version
    /* R8G8B8A8Srgb                   */ DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
    // R8G8B8 formats are stored as RGBA
    /* R8G8B8Typeless                 */ DXGI_FORMAT_R8G8B8A8_TYPELESS,
    /* R8G8B8Uint                     */ DXGI_FORMAT_R8G8B8A8_UINT,
    /* R8G8B8SInt                     */ DXGI_FORMAT_R8G8B8A8_SINT,
    /* R8G8B8UNorm                    */ DXGI_FORMAT_R8G8B8A8_UNORM,
    /* R8G8B8SNorm                    */ DXGI_FORMAT_R8G8B8A8_SNORM,
    /* R8G8B8UScaled                  */ DXGI_FORMAT_R8G8B8A8_UINT,
    /* R8G8B8SScaled                  */ DXGI_FORMAT_R8G8B8A8_SINT,
    /* R8G8B8Srgb                     */ DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
    /* R8G8Typeless                   */ DXGI_FORMAT_R8G8_TYPELESS,
    /* R8G8Uint                       */ DXGI_FORMAT_R8G8_UINT,
    /* R8G8SInt                       */ DXGI_FORMAT_R8G8_SINT,
    /* R8G8UNorm                      */ DXGI_FORMAT_R8G8_UNORM,
    /* R8G8SNorm                      */ DXGI_FORMAT_R8G8_SNORM,
    /* R8G8UScaled                    */ DXGI_FORMAT_R8G8_UINT,
    /* R8G8SScaled                    */ DXGI_FORMAT_R8G8_SINT,
    /* R8G8Srgb                       */ DXGI_FORMAT_UNKNOWN,
    /* R8Typeless                     */ DXGI_FORMAT_R8_TYPELESS,
    /* R8Uint                         */ DXGI_FORMAT_R8_UINT,
    /* R8SInt                         */ DXGI_FORMAT_R8_SINT,
    /* R8UNorm                        */ DXGI_FORMAT_R8_UNORM,
    /* R8SNorm                        */ DXGI_FORMAT_R8_SNORM,
    /* R8UScaled                      */ DXGI_FORMAT_R8_UINT,
    /* R8SScaled                      */ DXGI_FORMAT_R8_SINT,
    /* R8Srgb                         */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8A8Typeless               */ DXGI_FORMAT_B8G8R8A8_TYPELESS,
    /* B8G8R8A8Uint                   */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8A8SInt                   */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8A8UNorm                  */ DXGI_FORMAT_B8G8R8A8_UNORM,
    /* B8G8R8A8SNorm                  */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8A8UScaled                */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8A8SScaled                */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8A8Srgb                   */ DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
    /* B8G8R8Typeless                 */ DXGI_FORMAT_B8G8R8A8_TYPELESS,
    /* B8G8R8Uint                     */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8SInt                     */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8UNorm                    */ DXGI_FORMAT_B8G8R8A8_UNORM,
    /* B8G8R8SNorm                    */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8UScaled                  */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8SScaled                  */ DXGI_FORMAT_UNKNOWN,
    /* B8G8R8Srgb                     */ DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
    /* R4G4B4A4UNorm                  */ DXGI_FORMAT_UNKNOWN,
    /* B4G4R4A4UNorm                  */ DXGI_FORMAT_B4G4R4A4_UNORM,
    /* R4G4UNorm                      */ DXGI_FORMAT_UNKNOWN,
    /* R5G6B5UNorm                    */ DXGI_FORMAT_UNKNOWN,
    /* B5G6R5UNorm                    */ DXGI_FORMAT_B5G6R5_UNORM,
    /* R5G5B5A1UNorm                  */ DXGI_FORMAT_UNKNOWN,
    /* B5G5R5A1UNorm                  */ DXGI_FORMAT_B5G5R5A1_UNORM,
    /* A1R5G5B5UNorm                  */ DXGI_FORMAT_UNKNOWN,
    /* R10G10B10A2Typeless            */ DXGI_FORMAT_R10G10B10A2_TYPELESS,
    /* R10G10B10A2UInt                */ DXGI_FORMAT_R10G10B10A2_UINT,
    /* R10G10B10A2SInt                */ DXGI_FORMAT_UNKNOWN,
    /* R10G10B10A2UNorm               */ DXGI_FORMAT_R10G10B10A2_UNORM,
    /* R10G10B10A2SNorm               */ DXGI_FORMAT_UNKNOWN,
    /* R10G10B10A2UScaled             */ DXGI_FORMAT_R10G10B10A2_UINT, //< UScaled is an integer casted to a float, so use the int version
    /* R10G10B10A2SScaled             */ DXGI_FORMAT_UNKNOWN,
    /* B10G10R10A2Typeless            */ DXGI_FORMAT_UNKNOWN,
    /* B10G10R10A2UInt                */ DXGI_FORMAT_UNKNOWN,
    /* B10G10R10A2SInt                */ DXGI_FORMAT_UNKNOWN,
    /* B10G10R10A2UNorm               */ DXGI_FORMAT_UNKNOWN,
    /* B10G10R10A2SNorm               */ DXGI_FORMAT_UNKNOWN,
    /* B10G10R10A2UScaled             */ DXGI_FORMAT_UNKNOWN,
    /* B10G10R10A2SScaled             */ DXGI_FORMAT_UNKNOWN,
    /* R11G11B10UFloat                */ DXGI_FORMAT_R11G11B10_FLOAT,
    /* R9G9B9E5UFloat                 */ DXGI_FORMAT_R9G9B9E5_SHAREDEXP,
    /* D32SFloat                      */ DXGI_FORMAT_D32_FLOAT,
    /* D24UNorm                       */ DXGI_FORMAT_R24_UNORM_X8_TYPELESS,
    /* D16UNorm                       */ DXGI_FORMAT_D16_UNORM,
    /* D32SFloatS8UInt                */ DXGI_FORMAT_D32_FLOAT_S8X24_UINT,
    /* D24UNormS8UInt                 */ DXGI_FORMAT_D24_UNORM_S8_UINT,
    /* D16UNormS8UInt                 */ DXGI_FORMAT_UNKNOWN,
    /* S8UInt                         */ DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,
    /* BC1Typeless                    */ DXGI_FORMAT_BC1_TYPELESS,
    /* BC1UNorm                       */ DXGI_FORMAT_BC1_UNORM,
    /* BC1Srgb                        */ DXGI_FORMAT_BC1_UNORM_SRGB,
    /* BC2Typeless                    */ DXGI_FORMAT_BC2_TYPELESS,
    /* BC2UNorm                       */ DXGI_FORMAT_BC2_UNORM,
    /* BC2Srgb                        */ DXGI_FORMAT_BC2_UNORM_SRGB,
    /* BC3Typeless                    */ DXGI_FORMAT_BC3_TYPELESS,
    /* BC3UNorm                       */ DXGI_FORMAT_BC3_UNORM,
    /* BC3Srgb                        */ DXGI_FORMAT_BC3_UNORM_SRGB,
    /* BC4Typeless                    */ DXGI_FORMAT_BC4_TYPELESS,
    /* BC4UNorm                       */ DXGI_FORMAT_BC4_UNORM,
    /* BC4SNorm                       */ DXGI_FORMAT_BC4_SNORM,
    /* BC5Typeless                    */ DXGI_FORMAT_BC5_TYPELESS,
    /* BC5UNorm                       */ DXGI_FORMAT_BC5_UNORM,
    /* BC5SNorm                       */ DXGI_FORMAT_BC5_SNORM,
    /* BC6HTypeless                   */ DXGI_FORMAT_BC6H_TYPELESS,
    /* BC6HSFloat                     */ DXGI_FORMAT_BC6H_SF16,
    /* BC6HUFloat                     */ DXGI_FORMAT_BC6H_UF16,
    /* BC7Typeless                    */ DXGI_FORMAT_BC7_TYPELESS,
    /* BC7UNorm                       */ DXGI_FORMAT_BC7_UNORM,
    /* BC7Srgb                        */ DXGI_FORMAT_BC7_UNORM_SRGB,
    /* SamplerFeedbackMinMipOpaque    */ DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,
    /* SamplerFeedbackMipRegionOpaque */ DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,
];

pub(crate) const DX12_VERTEX_FORMATS : [DXGI_FORMAT; VertexFormat::COUNT] = [
    /* X64Y64Z64W64SFloat  */ DXGI_FORMAT_UNKNOWN,
    /* X64Y64Z64W64SInt    */ DXGI_FORMAT_UNKNOWN,
    /* X64Y64Z64W64UInt    */ DXGI_FORMAT_UNKNOWN,
    /* X64Y64Z64SFloat     */ DXGI_FORMAT_UNKNOWN,
    /* X64Y64Z64SInt       */ DXGI_FORMAT_UNKNOWN,
    /* X64Y64Z64UInt       */ DXGI_FORMAT_UNKNOWN,
    /* X64Y64SFloat        */ DXGI_FORMAT_UNKNOWN,
    /* X64Y64SInt          */ DXGI_FORMAT_UNKNOWN,
    /* X64Y64UInt          */ DXGI_FORMAT_UNKNOWN,
    /* X64SFloat           */ DXGI_FORMAT_UNKNOWN,
    /* X64SInt             */ DXGI_FORMAT_UNKNOWN,
    /* X64UInt             */ DXGI_FORMAT_UNKNOWN,
    /* X32Y32Z32W32SFloat  */ DXGI_FORMAT_R32G32B32A32_FLOAT,
    /* X32Y32Z32W32SInt    */ DXGI_FORMAT_R32G32B32A32_SINT,
    /* X32Y32Z32W32UInt    */ DXGI_FORMAT_R32G32B32A32_UINT,
    /* X32Y32Z32SFloat     */ DXGI_FORMAT_R32G32B32_FLOAT,
    /* X32Y32Z32SInt       */ DXGI_FORMAT_R32G32B32_SINT,
    /* X32Y32Z32UInt       */ DXGI_FORMAT_R32G32B32_UINT,
    /* X32Y32SFloat        */ DXGI_FORMAT_R32G32_FLOAT,
    /* X32Y32SInt          */ DXGI_FORMAT_R32G32_SINT,
    /* X32Y32UInt          */ DXGI_FORMAT_R32G32_UINT,
    /* X32SFloat           */ DXGI_FORMAT_R32_FLOAT,
    /* X32SInt             */ DXGI_FORMAT_R32_SINT,
    /* X32UInt             */ DXGI_FORMAT_R32_UINT,
    /* X16Y16Z16W16SFloat  */ DXGI_FORMAT_R16G16B16A16_FLOAT,
    /* X16Y16Z16W16SInt    */ DXGI_FORMAT_R16G16B16A16_SINT,
    /* X16Y16Z16W16UInt    */ DXGI_FORMAT_R16G16B16A16_UINT,
    /* X16Y16Z16W16SNorm   */ DXGI_FORMAT_R16G16B16A16_SNORM,
    /* X16Y16Z16W16UNorm   */ DXGI_FORMAT_R16G16B16A16_UNORM,
    /* X16Y16Z16W16SScaled */ DXGI_FORMAT_R16G16B16A16_SINT, // Use SInt here, as scaled are integers that are cast to floats
    /* X16Y16Z16W16UScaled */ DXGI_FORMAT_R16G16B16A16_UINT, // Use UInt here, as scaled are integers that are cast to floats
    // XYZ gets encoded as XYZW here
    /* X16Y16Z16SFloat     */ DXGI_FORMAT_R16G16B16A16_FLOAT,
    /* X16Y16Z16SInt       */ DXGI_FORMAT_R16G16B16A16_SINT,
    /* X16Y16Z16UInt       */ DXGI_FORMAT_R16G16B16A16_UINT,
    /* X16Y16Z16SNorm      */ DXGI_FORMAT_R16G16B16A16_SNORM,
    /* X16Y16Z16UNorm      */ DXGI_FORMAT_R16G16B16A16_UNORM,
    /* X16Y16Z16SScaled    */ DXGI_FORMAT_R16G16B16A16_SINT, // Use SInt here, as scaled are integers that are cast to floats
    /* X16Y16Z16UScaled    */ DXGI_FORMAT_R16G16B16A16_UINT, // Use UInt here, as scaled are integers that are cast to floats
    /* X16Y16SFloat        */ DXGI_FORMAT_R16G16_FLOAT,
    /* X16Y16SInt          */ DXGI_FORMAT_R16G16_SINT,
    /* X16Y16UInt          */ DXGI_FORMAT_R16G16_UINT,
    /* X16Y16SNorm         */ DXGI_FORMAT_R16G16_SNORM,
    /* X16Y16UNorm         */ DXGI_FORMAT_R16G16_UNORM,
    /* X16Y16SScaled       */ DXGI_FORMAT_R16G16_SINT, // Use SInt here, as scaled are integers that are cast to floats
    /* X16Y16UScaled       */ DXGI_FORMAT_R16G16_UINT, // Use UInt here, as scaled are integers that are cast to floats
    /* X16SFloat           */ DXGI_FORMAT_R16_FLOAT,
    /* X16SInt             */ DXGI_FORMAT_R16_SINT,
    /* X16UInt             */ DXGI_FORMAT_R16_UINT,
    /* X16SNorm            */ DXGI_FORMAT_R16_SNORM,
    /* X16UNorm            */ DXGI_FORMAT_R16_UNORM,
    /* X16SScaled          */ DXGI_FORMAT_R16_SINT, // Use SInt here, as scaled are integers that are cast to floats
    /* X16UScaled          */ DXGI_FORMAT_R16_UINT, // Use UInt here, as scaled are integers that are cast to floats
    /* X8Y8Z8W8SInt        */ DXGI_FORMAT_R8G8B8A8_SINT,
    /* X8Y8Z8W8UInt        */ DXGI_FORMAT_R8G8B8A8_UINT,
    /* X8Y8Z8W8SNorm       */ DXGI_FORMAT_R8G8B8A8_SNORM,
    /* X8Y8Z8W8UNorm       */ DXGI_FORMAT_R8G8B8A8_UNORM,
    /* X8Y8Z8W8SScaled     */ DXGI_FORMAT_R8G8B8A8_SINT, // Use SInt here, as scaled are integers that are cast to floats
    /* X8Y8Z8W8UScaled     */ DXGI_FORMAT_R8G8B8A8_UINT, // Use UInt here, as scaled are integers that are cast to floats
    // XYZ gets encoded as XYZW here
    /* X8Y8Z8SInt          */ DXGI_FORMAT_R8G8B8A8_SINT,
    /* X8Y8Z8UInt          */ DXGI_FORMAT_R8G8B8A8_UINT,
    /* X8Y8Z8SNorm         */ DXGI_FORMAT_R8G8B8A8_SNORM,
    /* X8Y8Z8UNorm         */ DXGI_FORMAT_R8G8B8A8_UNORM,
    /* X8Y8Z8SScaled       */ DXGI_FORMAT_R8G8B8A8_SINT, // Use SInt here, as scaled are integers that are cast to floats
    /* X8Y8Z8UScaled       */ DXGI_FORMAT_R8G8B8A8_UINT, // Use UInt here, as scaled are integers that are cast to floats
    /* X8Y8SInt            */ DXGI_FORMAT_R8G8_SINT,
    /* X8Y8UInt            */ DXGI_FORMAT_R8G8_UINT,
    /* X8Y8SNorm           */ DXGI_FORMAT_R8G8_SNORM,
    /* X8Y8UNorm           */ DXGI_FORMAT_R8G8_UNORM,
    /* X8Y8SScaled         */ DXGI_FORMAT_R8G8_SINT, // Use SInt here, as scaled are integers that are cast to floats
    /* X8Y8UScaled         */ DXGI_FORMAT_R8G8_UINT, // Use UInt here, as scaled are integers that are cast to floats
    /* X8SInt              */ DXGI_FORMAT_R8_SINT,
    /* X8UInt              */ DXGI_FORMAT_R8_UINT,
    /* X8SNorm             */ DXGI_FORMAT_R8_SNORM,
    /* X8UNorm             */ DXGI_FORMAT_R8_UNORM,
    /* X8SScaled           */ DXGI_FORMAT_R8_SINT, // Use SInt here, as scaled are integers that are cast to floats
    /* X8UScaled           */ DXGI_FORMAT_R8_UINT, // Use UInt here, as scaled are integers that are cast to floats
    /* Z8Y8X8W8SInt        */ DXGI_FORMAT_UNKNOWN,
    /* Z8Y8X8W8UInt        */ DXGI_FORMAT_UNKNOWN,
    /* Z8Y8X8W8SNorm       */ DXGI_FORMAT_UNKNOWN,
    /* Z8Y8X8W8UNorm       */ DXGI_FORMAT_B8G8R8A8_UNORM,
    /* Z8Y8X8W8SScaled     */ DXGI_FORMAT_UNKNOWN,
    /* Z8Y8X8W8UScaled     */ DXGI_FORMAT_UNKNOWN,
    /* Z8Y8X8SInt          */ DXGI_FORMAT_UNKNOWN,
    /* Z8Y8X8UInt          */ DXGI_FORMAT_UNKNOWN,
    /* Z8Y8X8SNorm         */ DXGI_FORMAT_UNKNOWN,
    /* Z8Y8X8UNorm         */ DXGI_FORMAT_UNKNOWN,
    /* Z8Y8X8SScaled       */ DXGI_FORMAT_UNKNOWN,
    /* Z8Y8X8UScaled       */ DXGI_FORMAT_UNKNOWN,
    /* X10Y10Z10W2SInt     */ DXGI_FORMAT_UNKNOWN,
    /* X10Y10Z10W2UInt     */ DXGI_FORMAT_R10G10B10A2_UINT,
    /* X10Y10Z10W2SNorm    */ DXGI_FORMAT_UNKNOWN,
    /* X10Y10Z10W2UNorm    */ DXGI_FORMAT_R10G10B10A2_UNORM,
    /* X10Y10Z10W2SScaled  */ DXGI_FORMAT_UNKNOWN,
    /* X10Y10Z10W2UScaled  */ DXGI_FORMAT_R10G10B10A2_UINT,
    /* Z10Y10X10W2SInt     */ DXGI_FORMAT_UNKNOWN,
    /* Z10Y10X10W2UInt     */ DXGI_FORMAT_UNKNOWN,
    /* Z10Y10X10W2SNorm    */ DXGI_FORMAT_UNKNOWN,
    /* Z10Y10X10W2UNorm    */ DXGI_FORMAT_UNKNOWN,
    /* Z10Y10X10W2SScaled  */ DXGI_FORMAT_UNKNOWN,
    /* Z10Y10X10W2UScaled  */ DXGI_FORMAT_UNKNOWN,
    /* X11Y11Z10UFloat,    */ DXGI_FORMAT_R11G11B10_FLOAT,
];