use onca_core::prelude::*;
use onca_core_macros::{EnumCount, EnumFromIndex, flags};



/// Vertex format components
#[derive(Clone, Copy, PartialEq, Eq, Debug, EnumCount)]
pub enum VertexComponents {
    X64Y64Z64W64,
    X64Y64Z64,
    X64Y64,
    X64,
    X32Y32Z32W32,
    X32Y32Z32,
    X32Y32,
    X32,
    X16Y16Z16W16,
    X16Y16Z16,
    X16Y16,
    X16,
    X8Y8Z8W8,
    X8Y8Z8,
    X8Y8,
    X8,
    Z8Y8X8W8,
    Z8Y8X8,
    X10Y10Z10W2,
    Z10Y10X10W2,
    X11Y11Z10,
}

/// Vertex format data type
#[derive(Clone, Copy, PartialEq, Eq, Debug, EnumCount)]
pub enum VertexDataType {
    SFloat,
    UFloat,
    SInt,
    Uint,
    SNorm,
    UNorm,
    SScaled,
    UScaled,
}

/// Vertex format
#[derive(Clone, Copy, PartialEq, Eq, Debug, EnumCount, EnumFromIndex)]
pub enum VertexFormat {
    X64Y64Z64W64SFloat,
    X64Y64Z64W64SInt,
    X64Y64Z64W64UInt,
    X64Y64Z64SFloat,
    X64Y64Z64SInt,
    X64Y64Z64UInt,
    X64Y64SFloat,
    X64Y64SInt,
    X64Y64UInt,
    X64SFloat,
    X64SInt,
    X64UInt,
    X32Y32Z32W32SFloat,
    X32Y32Z32W32SInt,
    X32Y32Z32W32UInt,
    X32Y32Z32SFloat,
    X32Y32Z32SInt,
    X32Y32Z32UInt,
    X32Y32SFloat,
    X32Y32SInt,
    X32Y32UInt,
    X32SFloat,
    X32SInt,
    X32UInt,
    X16Y16Z16W16SFloat,
    X16Y16Z16W16SInt,
    X16Y16Z16W16UInt,
    X16Y16Z16W16SNorm,
    X16Y16Z16W16UNorm,
    X16Y16Z16W16SScaled,
    X16Y16Z16W16UScaled,
    X16Y16Z16SFloat,
    X16Y16Z16SInt,
    X16Y16Z16UInt,
    X16Y16Z16SNorm,
    X16Y16Z16UNorm,
    X16Y16Z16SScaled,
    X16Y16Z16UScaled,
    X16Y16SFloat,
    X16Y16SInt,
    X16Y16UInt,
    X16Y16SNorm,
    X16Y16UNorm,
    X16Y16SScaled,
    X16Y16UScaled,
    X16SFloat,
    X16SInt,
    X16UInt,
    X16SNorm,
    X16UNorm,
    X16SScaled,
    X16UScaled,
    X8Y8Z8W8SInt,
    X8Y8Z8W8UInt,
    X8Y8Z8W8SNorm,
    X8Y8Z8W8UNorm,
    X8Y8Z8W8SScaled,
    X8Y8Z8W8UScaled,
    X8Y8Z8SInt,
    X8Y8Z8UInt,
    X8Y8Z8SNorm,
    X8Y8Z8UNorm,
    X8Y8Z8SScaled,
    X8Y8Z8UScaled,
    X8Y8SInt,
    X8Y8UInt,
    X8Y8SNorm,
    X8Y8UNorm,
    X8Y8SScaled,
    X8Y8UScaled,
    X8SInt,
    X8UInt,
    X8SNorm,
    X8UNorm,
    X8SScaled,
    X8UScaled,
    Z8Y8X8W8SInt,
    Z8Y8X8W8UInt,
    Z8Y8X8W8SNorm,
    Z8Y8X8W8UNorm,
    Z8Y8X8W8SScaled,
    Z8Y8X8W8UScaled,
    Z8Y8X8SInt,
    Z8Y8X8UInt,
    Z8Y8X8SNorm,
    Z8Y8X8UNorm,
    Z8Y8X8SScaled,
    Z8Y8X8UScaled,
    X10Y10Z10W2SInt,
    X10Y10Z10W2UInt,
    X10Y10Z10W2SNorm,
    X10Y10Z10W2UNorm,
    X10Y10Z10W2SScaled,
    X10Y10Z10W2UScaled,
    Z10Y10X10W2SInt,
    Z10Y10X10W2UInt,
    Z10Y10X10W2SNorm,
    Z10Y10X10W2UNorm,
    Z10Y10X10W2SScaled,
    Z10Y10X10W2UScaled,
    X11Y11Z10UFloat,
}

impl VertexFormat {
    /// Try to get the vertex format from its components and data type
    pub fn from_components_and_data_type(component: VertexComponents, data_type: VertexDataType) -> Option<Self> {
        COMPONENTS_AND_DATA_TYPE_TO_FORMAT[component as usize][data_type as usize]
    }

    /// Get the vertex format components and data type
    pub fn to_components_and_data_type(self) -> (VertexComponents, VertexDataType) {
        FORMAT_TO_COMPONENTS_AND_DATA_TYPE[self as usize]
    }

    /// Check if the format is always available, regardless of API
    pub fn is_always_available(self) -> bool {
        FORMAT_ALWAYS_AVAILABLE[self as usize]
    }

    /// Call a closure for each vertex format.
    pub fn for_each<F>(mut f: F)
    where
        F : FnMut(VertexFormat)
    {
        for i in 0..VertexFormat::COUNT {
            f(unsafe { Self::from_idx_unchecked(i) })
        }
    }
}

impl From<VertexFormat> for (VertexComponents, VertexDataType) {
    fn from(value: VertexFormat) -> Self {
        value.to_components_and_data_type()
    }
}

impl TryFrom<(VertexComponents, VertexDataType)> for VertexFormat {
    type Error = ();

    fn try_from(value: (VertexComponents, VertexDataType)) -> Result<Self, Self::Error> {
        Self::from_components_and_data_type(value.0, value.1).map_or(Err(()), |format| Ok(format))
    }
}

//==============================================================================================================================
// LUTS
//==============================================================================================================================

const FORMAT_TO_COMPONENTS_AND_DATA_TYPE : [(VertexComponents, VertexDataType); VertexFormat::COUNT] = [
    /* X64Y64Z64W64SFloat  */ (VertexComponents::X64Y64Z64W64, VertexDataType::SFloat ),
    /* X64Y64Z64W64SInt    */ (VertexComponents::X64Y64Z64W64, VertexDataType::SInt   ),
    /* X64Y64Z64W64UInt    */ (VertexComponents::X64Y64Z64W64, VertexDataType::Uint   ),
    /* X64Y64Z64SFloat     */ (VertexComponents::X64Y64Z64   , VertexDataType::SFloat ),
    /* X64Y64Z64SInt       */ (VertexComponents::X64Y64Z64   , VertexDataType::SInt   ),
    /* X64Y64Z64UInt       */ (VertexComponents::X64Y64Z64   , VertexDataType::Uint   ),
    /* X64Y64SFloat        */ (VertexComponents::X64Y64      , VertexDataType::SFloat ),
    /* X64Y64SInt          */ (VertexComponents::X64Y64      , VertexDataType::SInt   ),
    /* X64Y64UInt          */ (VertexComponents::X64Y64      , VertexDataType::Uint   ),
    /* X64SFloat           */ (VertexComponents::X64         , VertexDataType::SFloat ),
    /* X64SInt             */ (VertexComponents::X64         , VertexDataType::SInt   ),
    /* X64UInt             */ (VertexComponents::X64         , VertexDataType::Uint   ),
    /* X32Y32Z32W32SFloat  */ (VertexComponents::X32Y32Z32W32, VertexDataType::SFloat ),
    /* X32Y32Z32W32SInt    */ (VertexComponents::X32Y32Z32W32, VertexDataType::SInt   ),
    /* X32Y32Z32W32UInt    */ (VertexComponents::X32Y32Z32W32, VertexDataType::Uint   ),
    /* X32Y32Z32SFloat     */ (VertexComponents::X32Y32Z32   , VertexDataType::SFloat ),
    /* X32Y32Z32SInt       */ (VertexComponents::X32Y32Z32   , VertexDataType::SInt   ),
    /* X32Y32Z32UInt       */ (VertexComponents::X32Y32Z32   , VertexDataType::Uint   ),
    /* X32Y32SFloat        */ (VertexComponents::X32Y32      , VertexDataType::SFloat ),
    /* X32Y32SInt          */ (VertexComponents::X32Y32      , VertexDataType::SInt   ),
    /* X32Y32UInt          */ (VertexComponents::X32Y32      , VertexDataType::Uint   ),
    /* X32SFloat           */ (VertexComponents::X32         , VertexDataType::SFloat ),
    /* X32SInt             */ (VertexComponents::X32         , VertexDataType::SInt   ),
    /* X32UInt             */ (VertexComponents::X32         , VertexDataType::Uint   ),
    /* X16Y16Z16W16SFloat  */ (VertexComponents::X16Y16Z16W16, VertexDataType::SFloat ),
    /* X16Y16Z16W16SInt    */ (VertexComponents::X16Y16Z16W16, VertexDataType::SInt   ),
    /* X16Y16Z16W16UInt    */ (VertexComponents::X16Y16Z16W16, VertexDataType::Uint   ),
    /* X16Y16Z16W16SNorm   */ (VertexComponents::X16Y16Z16W16, VertexDataType::SNorm  ),
    /* X16Y16Z16W16UNorm   */ (VertexComponents::X16Y16Z16W16, VertexDataType::UNorm  ),
    /* X16Y16Z16W16SScaled */ (VertexComponents::X16Y16Z16W16, VertexDataType::SScaled),
    /* X16Y16Z16W16UScaled */ (VertexComponents::X16Y16Z16W16, VertexDataType::UScaled),
    /* X16Y16Z16SFloat     */ (VertexComponents::X16Y16Z16W16, VertexDataType::SFloat ),
    /* X16Y16Z16SInt       */ (VertexComponents::X16Y16Z16   , VertexDataType::SInt   ),
    /* X16Y16Z16UInt       */ (VertexComponents::X16Y16Z16   , VertexDataType::Uint   ),
    /* X16Y16Z16SNorm      */ (VertexComponents::X16Y16Z16   , VertexDataType::SNorm  ),
    /* X16Y16Z16UNorm      */ (VertexComponents::X16Y16Z16   , VertexDataType::UNorm  ),
    /* X16Y16Z16SScaled    */ (VertexComponents::X16Y16Z16   , VertexDataType::SScaled),
    /* X16Y16Z16UScaled    */ (VertexComponents::X16Y16Z16   , VertexDataType::UScaled),
    /* X16Y16SFloat        */ (VertexComponents::X16Y16      , VertexDataType::SFloat ),
    /* X16Y16SInt          */ (VertexComponents::X16Y16      , VertexDataType::SInt   ),
    /* X16Y16UInt          */ (VertexComponents::X16Y16      , VertexDataType::Uint   ),
    /* X16Y16SNorm         */ (VertexComponents::X16Y16      , VertexDataType::SNorm  ),
    /* X16Y16UNorm         */ (VertexComponents::X16Y16      , VertexDataType::UNorm  ),
    /* X16Y16SScaled       */ (VertexComponents::X16Y16      , VertexDataType::SScaled),
    /* X16Y16UScaled       */ (VertexComponents::X16Y16      , VertexDataType::UScaled),
    /* X16SFloat           */ (VertexComponents::X16         , VertexDataType::SFloat ),
    /* X16SInt             */ (VertexComponents::X16         , VertexDataType::SInt   ),
    /* X16UInt             */ (VertexComponents::X16         , VertexDataType::Uint   ),
    /* X16SNorm            */ (VertexComponents::X16         , VertexDataType::SNorm  ),
    /* X16UNorm            */ (VertexComponents::X16         , VertexDataType::UNorm  ),
    /* X16SScaled          */ (VertexComponents::X16         , VertexDataType::SScaled),
    /* X16UScaled          */ (VertexComponents::X16         , VertexDataType::UScaled),
    /* X8Y8Z8W8SInt        */ (VertexComponents::X8Y8Z8W8    , VertexDataType::SInt   ),
    /* X8Y8Z8W8UInt        */ (VertexComponents::X8Y8Z8W8    , VertexDataType::Uint   ),
    /* X8Y8Z8W8SNorm       */ (VertexComponents::X8Y8Z8W8    , VertexDataType::SNorm  ),
    /* X8Y8Z8W8UNorm       */ (VertexComponents::X8Y8Z8W8    , VertexDataType::UNorm  ),
    /* X8Y8Z8W8SScaled     */ (VertexComponents::X8Y8Z8W8    , VertexDataType::SScaled),
    /* X8Y8Z8W8UScaled     */ (VertexComponents::X8Y8Z8W8    , VertexDataType::UScaled),
    /* X8Y8Z8SInt          */ (VertexComponents::X8Y8Z8      , VertexDataType::SInt   ),
    /* X8Y8Z8UInt          */ (VertexComponents::X8Y8Z8      , VertexDataType::Uint   ),
    /* X8Y8Z8SNorm         */ (VertexComponents::X8Y8Z8      , VertexDataType::SNorm  ),
    /* X8Y8Z8UNorm         */ (VertexComponents::X8Y8Z8      , VertexDataType::UNorm  ),
    /* X8Y8Z8SScaled       */ (VertexComponents::X8Y8Z8      , VertexDataType::SScaled),
    /* X8Y8Z8UScaled       */ (VertexComponents::X8Y8Z8      , VertexDataType::UScaled),
    /* X8Y8SInt            */ (VertexComponents::X8Y8        , VertexDataType::SInt   ),
    /* X8Y8UInt            */ (VertexComponents::X8Y8        , VertexDataType::Uint   ),
    /* X8Y8SNorm           */ (VertexComponents::X8Y8        , VertexDataType::SNorm  ),
    /* X8Y8UNorm           */ (VertexComponents::X8Y8        , VertexDataType::UNorm  ),
    /* X8Y8SScaled         */ (VertexComponents::X8Y8        , VertexDataType::SScaled),
    /* X8Y8UScaled         */ (VertexComponents::X8Y8        , VertexDataType::UScaled),
    /* X8SInt              */ (VertexComponents::X8          , VertexDataType::SInt   ),
    /* X8UInt              */ (VertexComponents::X8          , VertexDataType::Uint   ),
    /* X8SNorm             */ (VertexComponents::X8          , VertexDataType::SNorm  ),
    /* X8UNorm             */ (VertexComponents::X8          , VertexDataType::UNorm  ),
    /* X8SScaled           */ (VertexComponents::X8          , VertexDataType::SScaled),
    /* X8UScaled           */ (VertexComponents::X8          , VertexDataType::UScaled),
    /* Z8Y8X8W8SInt        */ (VertexComponents::Z8Y8X8W8    , VertexDataType::SInt   ),
    /* Z8Y8X8W8UInt        */ (VertexComponents::Z8Y8X8W8    , VertexDataType::Uint   ),
    /* Z8Y8X8W8SNorm       */ (VertexComponents::Z8Y8X8W8    , VertexDataType::SNorm  ),
    /* Z8Y8X8W8UNorm       */ (VertexComponents::Z8Y8X8W8    , VertexDataType::UNorm  ),
    /* Z8Y8X8W8SScaled     */ (VertexComponents::Z8Y8X8W8    , VertexDataType::SScaled),
    /* Z8Y8X8W8UScaled     */ (VertexComponents::Z8Y8X8W8    , VertexDataType::UScaled),
    /* Z8Y8X8SInt          */ (VertexComponents::Z8Y8X8      , VertexDataType::SInt   ),
    /* Z8Y8X8UInt          */ (VertexComponents::Z8Y8X8      , VertexDataType::Uint   ),
    /* Z8Y8X8SNorm         */ (VertexComponents::Z8Y8X8      , VertexDataType::SNorm  ),
    /* Z8Y8X8UNorm         */ (VertexComponents::Z8Y8X8      , VertexDataType::UNorm  ),
    /* Z8Y8X8SScaled       */ (VertexComponents::Z8Y8X8      , VertexDataType::SScaled),
    /* Z8Y8X8UScaled       */ (VertexComponents::Z8Y8X8      , VertexDataType::UScaled),
    /* X10Y10Z10W2SInt     */ (VertexComponents::X10Y10Z10W2 , VertexDataType::SInt   ),
    /* X10Y10Z10W2UInt     */ (VertexComponents::X10Y10Z10W2 , VertexDataType::Uint   ),
    /* X10Y10Z10W2SNorm    */ (VertexComponents::X10Y10Z10W2 , VertexDataType::SNorm  ),
    /* X10Y10Z10W2UNorm    */ (VertexComponents::X10Y10Z10W2 , VertexDataType::UNorm  ),
    /* X10Y10Z10W2SScaled  */ (VertexComponents::X10Y10Z10W2 , VertexDataType::SScaled),
    /* X10Y10Z10W2UScaled  */ (VertexComponents::X10Y10Z10W2 , VertexDataType::UScaled),
    /* Z10Y10X10W2SInt     */ (VertexComponents::Z10Y10X10W2 , VertexDataType::SInt   ),
    /* Z10Y10X10W2UInt     */ (VertexComponents::Z10Y10X10W2 , VertexDataType::Uint   ),
    /* Z10Y10X10W2SNorm    */ (VertexComponents::Z10Y10X10W2 , VertexDataType::SNorm  ),
    /* Z10Y10X10W2UNorm    */ (VertexComponents::Z10Y10X10W2 , VertexDataType::UNorm  ),
    /* Z10Y10X10W2SScaled  */ (VertexComponents::Z10Y10X10W2 , VertexDataType::SScaled),
    /* Z10Y10X10W2UScaled  */ (VertexComponents::Z10Y10X10W2 , VertexDataType::UScaled),
    /* X11Y11Z10UFloat,    */ (VertexComponents::X11Y11Z10   , VertexDataType::UFloat ), 
];

const COMPONENTS_AND_DATA_TYPE_TO_FORMAT : [[Option<VertexFormat>; VertexDataType::COUNT]; VertexComponents::COUNT] = [
    //                  SFloat                                , UFloat, SInt                                , Uint                                , SNorm, UNorm, SScaled, UScaled,
    /* X64Y64Z64W64 */ [Some(VertexFormat::X64Y64Z64W64SFloat), None                               , Some(VertexFormat::X64Y64Z64W64SInt), Some(VertexFormat::X64Y64Z64W64UInt), None                                 , None                                 , None                                   , None                                   ],
    /* X64Y64Z64    */ [Some(VertexFormat::X64Y64Z64SFloat   ), None                               , Some(VertexFormat::X64Y64Z64SInt   ), Some(VertexFormat::X64Y64Z64UInt   ), None                                 , None                                 , None                                   , None                                   ],
    /* X64Y64       */ [Some(VertexFormat::X64Y64SFloat      ), None                               , Some(VertexFormat::X64Y64SInt      ), Some(VertexFormat::X64Y64UInt      ), None                                 , None                                 , None                                   , None                                   ],
    /* X64          */ [Some(VertexFormat::X64SFloat         ), None                               , Some(VertexFormat::X64SInt         ), Some(VertexFormat::X64UInt         ), None                                 , None                                 , None                                   , None                                   ],
    /* X32Y32Z32W32 */ [Some(VertexFormat::X32Y32Z32W32SFloat), None                               , Some(VertexFormat::X64Y64Z64W64SInt), Some(VertexFormat::X64Y64Z64W64UInt), None                                 , None                                 , None                                   , None                                   ],
    /* X32Y32Z32    */ [Some(VertexFormat::X32Y32Z32SFloat   ), None                               , Some(VertexFormat::X64Y64Z64SInt   ), Some(VertexFormat::X64Y64Z64UInt   ), None                                 , None                                 , None                                   , None                                   ],
    /* X32Y32       */ [Some(VertexFormat::X32Y32SFloat      ), None                               , Some(VertexFormat::X64Y64SInt      ), Some(VertexFormat::X64Y64UInt      ), None                                 , None                                 , None                                   , None                                   ],
    /* X32          */ [Some(VertexFormat::X32SFloat         ), None                               , Some(VertexFormat::X64SInt         ), Some(VertexFormat::X64UInt         ), None                                 , None                                 , None                                   , None                                   ],
    /* X16Y16Z16W16 */ [None                                  , None                               , Some(VertexFormat::X16Y16Z16W16SInt), Some(VertexFormat::X16Y16Z16W16UInt), Some(VertexFormat::X16Y16Z16W16SNorm), Some(VertexFormat::X16Y16Z16W16UNorm), Some(VertexFormat::X16Y16Z16W16SScaled), Some(VertexFormat::X16Y16Z16W16UScaled)],
    /* X16Y16Z16    */ [None                                  , None                               , Some(VertexFormat::X16Y16Z16SInt   ), Some(VertexFormat::X16Y16Z16UInt   ), Some(VertexFormat::X16Y16Z16SNorm   ), Some(VertexFormat::X16Y16Z16UNorm   ), Some(VertexFormat::X16Y16Z16SScaled   ), Some(VertexFormat::X16Y16Z16UScaled   )],
    /* X16Y16       */ [None                                  , None                               , Some(VertexFormat::X16Y16SInt      ), Some(VertexFormat::X16Y16UInt      ), Some(VertexFormat::X16Y16SNorm      ), Some(VertexFormat::X16Y16UNorm      ), Some(VertexFormat::X16Y16SScaled      ), Some(VertexFormat::X16Y16UScaled      )],
    /* X16          */ [None                                  , None                               , Some(VertexFormat::X16SInt         ), Some(VertexFormat::X16UInt         ), Some(VertexFormat::X16SNorm         ), Some(VertexFormat::X16UNorm         ), Some(VertexFormat::X16SScaled         ), Some(VertexFormat::X16UScaled         )],
    /* X8Y8Z8W8     */ [None                                  , None                               , Some(VertexFormat::X8Y8Z8W8SInt    ), Some(VertexFormat::X8Y8Z8W8UInt    ), Some(VertexFormat::X8Y8Z8W8SNorm    ), Some(VertexFormat::X8Y8Z8W8UNorm    ), Some(VertexFormat::X8Y8Z8W8SScaled    ), Some(VertexFormat::X8Y8Z8W8UScaled    )],
    /* X8Y8Z8       */ [None                                  , None                               , Some(VertexFormat::X8Y8Z8SInt      ), Some(VertexFormat::X8Y8Z8UInt      ), Some(VertexFormat::X8Y8Z8SNorm      ), Some(VertexFormat::X8Y8Z8UNorm      ), Some(VertexFormat::X8Y8Z8SScaled      ), Some(VertexFormat::X8Y8Z8UScaled      )],
    /* X8Y8         */ [None                                  , None                               , Some(VertexFormat::X8Y8SInt        ), Some(VertexFormat::X8Y8UInt        ), Some(VertexFormat::X8Y8SNorm        ), Some(VertexFormat::X8Y8UNorm        ), Some(VertexFormat::X8Y8SScaled        ), Some(VertexFormat::X8Y8UScaled        )],
    /* X8           */ [None                                  , None                               , Some(VertexFormat::X8SInt          ), Some(VertexFormat::X8UInt          ), Some(VertexFormat::X8SNorm          ), Some(VertexFormat::X8UNorm          ), Some(VertexFormat::X8SScaled          ), Some(VertexFormat::X8UScaled          )],
    /* Z8Y8X8W8     */ [None                                  , None                               , Some(VertexFormat::Z8Y8X8W8SInt    ), Some(VertexFormat::Z8Y8X8W8UInt    ), Some(VertexFormat::Z8Y8X8W8SNorm    ), Some(VertexFormat::Z8Y8X8W8UNorm    ), Some(VertexFormat::Z8Y8X8W8SScaled    ), Some(VertexFormat::Z8Y8X8W8UScaled    )],
    /* Z8Y8X8       */ [None                                  , None                               , Some(VertexFormat::Z8Y8X8SInt      ), Some(VertexFormat::Z8Y8X8UInt      ), Some(VertexFormat::Z8Y8X8SNorm      ), Some(VertexFormat::Z8Y8X8UNorm      ), Some(VertexFormat::Z8Y8X8SScaled      ), Some(VertexFormat::Z8Y8X8UScaled      )],
    /* X10Y10Z10W2  */ [None                                  , None                               , Some(VertexFormat::X10Y10Z10W2SInt ), Some(VertexFormat::X10Y10Z10W2UInt ), Some(VertexFormat::X10Y10Z10W2SNorm ), Some(VertexFormat::X10Y10Z10W2UNorm ), Some(VertexFormat::X10Y10Z10W2SScaled ), Some(VertexFormat::X10Y10Z10W2UScaled )],
    /* Z10Y10X10W2  */ [None                                  , None                               , Some(VertexFormat::Z10Y10X10W2SInt ), Some(VertexFormat::Z10Y10X10W2UInt ), Some(VertexFormat::Z10Y10X10W2SNorm ), Some(VertexFormat::Z10Y10X10W2UNorm ), Some(VertexFormat::Z10Y10X10W2SScaled ), Some(VertexFormat::Z10Y10X10W2UScaled )],
    /* X11Y11Z10    */ [None                                  , Some(VertexFormat::X11Y11Z10UFloat), None                                , None                                , None                                 , None                                 , None                                   , None                                   ],
];

const FORMAT_ALWAYS_AVAILABLE : [bool; VertexFormat::COUNT] = [
    /* X64Y64Z64W64SFloat  */ false,
    /* X64Y64Z64W64SInt    */ false,
    /* X64Y64Z64W64UInt    */ false,
    /* X64Y64Z64SFloat     */ false,
    /* X64Y64Z64SInt       */ false,
    /* X64Y64Z64UInt       */ false,
    /* X64Y64SFloat        */ false,
    /* X64Y64SInt          */ false,
    /* X64Y64UInt          */ false,
    /* X64SFloat           */ false,
    /* X64SInt             */ false,
    /* X64UInt             */ false,
    /* X32Y32Z32W32SFloat  */ true,
    /* X32Y32Z32W32SInt    */ true,
    /* X32Y32Z32W32UInt    */ true,
    /* X32Y32Z32SFloat     */ true,
    /* X32Y32Z32SInt       */ true,
    /* X32Y32Z32UInt       */ true,
    /* X32Y32SFloat        */ true,
    /* X32Y32SInt          */ true,
    /* X32Y32UInt          */ true,
    /* X32SFloat           */ true,
    /* X32SInt             */ true,
    /* X32UInt             */ true,
    /* X16Y16Z16W16SFloat  */ true,
    /* X16Y16Z16W16SInt    */ true,
    /* X16Y16Z16W16UInt    */ true,
    /* X16Y16Z16W16SNorm   */ true,
    /* X16Y16Z16W16UNorm   */ true,
    /* X16Y16Z16W16SScaled */ true,
    /* X16Y16Z16W16UScaled */ true,
    /* X16Y16Z16SFloat     */ true,
    /* X16Y16Z16SInt       */ true,
    /* X16Y16Z16UInt       */ true,
    /* X16Y16Z16SNorm      */ true,
    /* X16Y16Z16UNorm      */ true,
    /* X16Y16Z16SScaled    */ true,
    /* X16Y16Z16UScaled    */ true,
    /* X16Y16SFloat        */ true,
    /* X16Y16SInt          */ true,
    /* X16Y16UInt          */ true,
    /* X16Y16SNorm         */ true,
    /* X16Y16UNorm         */ true,
    /* X16Y16SScaled       */ true,
    /* X16Y16UScaled       */ true,
    /* X16SFloat           */ true,
    /* X16SInt             */ true,
    /* X16UInt             */ true,
    /* X16SNorm            */ true,
    /* X16UNorm            */ true,
    /* X16SScaled          */ true,
    /* X16UScaled          */ true,
    /* X8Y8Z8W8SInt        */ true,
    /* X8Y8Z8W8UInt        */ true,
    /* X8Y8Z8W8SNorm       */ true,
    /* X8Y8Z8W8UNorm       */ true,
    /* X8Y8Z8W8SScaled     */ true,
    /* X8Y8Z8W8UScaled     */ true,
    /* X8Y8Z8SInt          */ true,
    /* X8Y8Z8UInt          */ true,
    /* X8Y8Z8SNorm         */ true,
    /* X8Y8Z8UNorm         */ true,
    /* X8Y8Z8SScaled       */ true,
    /* X8Y8Z8UScaled       */ true,
    /* X8Y8SInt            */ true,
    /* X8Y8UInt            */ true,
    /* X8Y8SNorm           */ true,
    /* X8Y8UNorm           */ true,
    /* X8Y8SScaled         */ true,
    /* X8Y8UScaled         */ true,
    /* X8SInt              */ true,
    /* X8UInt              */ true,
    /* X8SNorm             */ true,
    /* X8UNorm             */ true,
    /* X8SScaled           */ true,
    /* X8UScaled           */ true,
    /* Z8Y8X8W8SInt        */ false,
    /* Z8Y8X8W8UInt        */ false,
    /* Z8Y8X8W8SNorm       */ false,
    /* Z8Y8X8W8UNorm       */ true,
    /* Z8Y8X8W8SScaled     */ false,
    /* Z8Y8X8W8UScaled     */ false,
    /* Z8Y8X8SInt          */ false,
    /* Z8Y8X8UInt          */ false,
    /* Z8Y8X8SNorm         */ false,
    /* Z8Y8X8UNorm         */ false,
    /* Z8Y8X8SScaled       */ false,
    /* Z8Y8X8UScaled       */ false,
    /* X10Y10Z10W2SInt     */ false,
    /* X10Y10Z10W2UInt     */ true,
    /* X10Y10Z10W2SNorm    */ false,
    /* X10Y10Z10W2UNorm    */ true,
    /* X10Y10Z10W2SScaled  */ false,
    /* X10Y10Z10W2UScaled  */ true,
    /* Z10Y10X10W2SInt     */ false,
    /* Z10Y10X10W2UInt     */ false,
    /* Z10Y10X10W2SNorm    */ false,
    /* Z10Y10X10W2UNorm    */ false,
    /* Z10Y10X10W2SScaled  */ false,
    /* Z10Y10X10W2UScaled  */ false,
    /* X11Y11Z10UFloat,    */ true, 
];

//==============================================================================================================================
// OTHER
//==============================================================================================================================

/// Vertex format support
#[flags]
pub enum VertexFormatSupport {
    Vertex,
    AccelerationStructure,
}